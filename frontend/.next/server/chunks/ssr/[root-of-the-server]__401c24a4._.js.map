{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///D:/FYP/Fyp/frontend/components/Navbar.js"],"sourcesContent":["// export default function Navbar() {\r\n//   return (\r\n//     <nav className=\"navbar\">\r\n//       <div className=\"navbar-left\">\r\n//         <h1 className=\"logo\">AI Document Guide</h1>\r\n//       </div>\r\n//       <div className=\"navbar-right\">\r\n//         <a href=\"/login\" className=\"nav-link\">Login</a>\r\n//         <a href=\"/register\" className=\"nav-link\">Register</a>\r\n//       </div>\r\n\r\n//       <style jsx>{`\r\n//         .navbar {\r\n//           display: flex;\r\n//           justify-content: space-between;\r\n//           align-items: center;\r\n//           padding: 1rem 2rem;\r\n//           background: #171717;\r\n//           color: white;\r\n//         }\r\n//         .logo {\r\n//           font-size: 1.5rem;\r\n//           font-weight: bold;\r\n//         }\r\n//         .navbar-right {\r\n//           display: flex;\r\n//           gap: 1rem;\r\n//         }\r\n//         .nav-link {\r\n//           background: #0070f3;\r\n//           padding: 0.5rem 1rem;\r\n//           border-radius: 5px;\r\n//           color: white;\r\n//           text-decoration: none;\r\n//           transition: background 0.2s;\r\n//         }\r\n//         .nav-link:hover {\r\n//           background: #0059c1;\r\n//         }\r\n//       `}</style>\r\n//     </nav>\r\n//   );\r\n// }\r\n\r\nimport Link from 'next/link';\r\nimport { useAuth } from '../context/AuthContext';\r\n\r\nexport default function Navbar() {\r\n  const { isLoggedIn, logout } = useAuth();\r\n\r\n  return (\r\n    <header className=\"fixed top-0 left-0 right-0 z-10 bg-gray-900/50 backdrop-blur-md border-b border-gray-700\">\r\n      <nav className=\"container mx-auto max-w-5xl px-4 py-3 flex justify-between items-center\">\r\n        <Link href=\"/\" className=\"text-xl font-bold text-white\">\r\n          ðŸ‡µðŸ‡° Awaam AI\r\n        </Link>\r\n        {isLoggedIn ? (\r\n          <button\r\n            onClick={logout}\r\n            className=\"bg-red-600 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-red-700 transition-colors\"\r\n          >\r\n            Logout\r\n          </button>\r\n        ) : (\r\n          <Link\r\n            href=\"/login\"\r\n            className=\"bg-green-600 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-green-700 transition-colors\"\r\n          >\r\n            Login\r\n          </Link>\r\n        )}\r\n      </nav>\r\n    </header>\r\n  );\r\n}"],"names":[],"mappings":"AAAA,qCAAqC;AACrC,aAAa;AACb,+BAA+B;AAC/B,sCAAsC;AACtC,sDAAsD;AACtD,eAAe;AACf,uCAAuC;AACvC,0DAA0D;AAC1D,gEAAgE;AAChE,eAAe;AAEf,sBAAsB;AACtB,oBAAoB;AACpB,2BAA2B;AAC3B,4CAA4C;AAC5C,iCAAiC;AACjC,gCAAgC;AAChC,iCAAiC;AACjC,0BAA0B;AAC1B,YAAY;AACZ,kBAAkB;AAClB,+BAA+B;AAC/B,+BAA+B;AAC/B,YAAY;AACZ,0BAA0B;AAC1B,2BAA2B;AAC3B,uBAAuB;AACvB,YAAY;AACZ,sBAAsB;AACtB,iCAAiC;AACjC,kCAAkC;AAClC,gCAAgC;AAChC,0BAA0B;AAC1B,mCAAmC;AACnC,yCAAyC;AACzC,YAAY;AACZ,4BAA4B;AAC5B,iCAAiC;AACjC,YAAY;AACZ,mBAAmB;AACnB,aAAa;AACb,OAAO;AACP,IAAI;;;;;;AAEJ;AACA;;;;AAEe,SAAS;IACtB,MAAM,EAAE,UAAU,EAAE,MAAM,EAAE,GAAG,IAAA,sIAAO;IAEtC,qBACE,qKAAC;QAAO,WAAU;kBAChB,cAAA,qKAAC;YAAI,WAAU;;8BACb,qKAAC,4IAAI;oBAAC,MAAK;oBAAI,WAAU;8BAA+B;;;;;;gBAGvD,2BACC,qKAAC;oBACC,SAAS;oBACT,WAAU;8BACX;;;;;yCAID,qKAAC,4IAAI;oBACH,MAAK;oBACL,WAAU;8BACX;;;;;;;;;;;;;;;;;AAOX","debugId":null}},
    {"offset": {"line": 105, "column": 0}, "map": {"version":3,"sources":["file:///D:/FYP/Fyp/frontend/components/Layout.js"],"sourcesContent":["import Head from 'next/head';\r\nimport Navbar from './Navbar';\r\n\r\nexport default function Layout({ children }) {\r\n  return (\r\n    <>\r\n      <Head>\r\n        <title>ðŸ‡µðŸ‡° Awaam AI</title>\r\n        <meta name=\"description\" content=\"AI Assistant for Pakistani Documents\" />\r\n        <link rel=\"icon\" href=\"/favicon.ico\" /> {/* Make sure to have a favicon in /public */}\r\n      </Head>\r\n\r\n      {/* This div applies the dark background and gradient from your index.html style */}\r\n      <div className=\"bg-gray-900 text-gray-100 min-h-screen flex flex-col font-sans\">\r\n        <Navbar />\r\n        {/* Main content area with padding-top to offset the fixed navbar */}\r\n        {/* We use h-screen and pt-[57px] to make the content fill the viewport */}\r\n        <main className=\"flex-1 flex flex-col pt-[57px] h-screen\">\r\n          {children}\r\n        </main>\r\n      </div>\r\n    </>\r\n  );\r\n}"],"names":[],"mappings":";;;;;AAAA;AACA;;;;AAEe,SAAS,OAAO,EAAE,QAAQ,EAAE;IACzC,qBACE;;0BACE,qKAAC,4IAAI;;kCACH,qKAAC;kCAAM;;;;;;kCACP,qKAAC;wBAAK,MAAK;wBAAc,SAAQ;;;;;;kCACjC,qKAAC;wBAAK,KAAI;wBAAO,MAAK;;;;;;oBAAiB;;;;;;;0BAIzC,qKAAC;gBAAI,WAAU;;kCACb,qKAAC,oIAAM;;;;;kCAGP,qKAAC;wBAAK,WAAU;kCACb;;;;;;;;;;;;;;AAKX","debugId":null}},
    {"offset": {"line": 191, "column": 0}, "map": {"version":3,"sources":["file:///D:/FYP/Fyp/frontend/components/ChatSidebar.js"],"sourcesContent":["// components/ChatSidebar.js\r\nimport { useState, useEffect } from 'react';\r\nimport { useAuth } from '../context/AuthContext';\r\nimport axios from 'axios'; // Using axios for simplicity, like in your chat.js\r\n\r\n// Make sure API_BASE is correctly defined in your .env.local\r\nconst API_BASE = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000/api';\r\n\r\nexport default function ChatSidebar({ onSelectChat, onNewChat, selectedChatId }) {\r\n  const [chats, setChats] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const { token } = useAuth(); // Get token from context\r\n\r\n  const fetchChats = async () => {\r\n    if (!token) return; // Don't fetch if not logged in\r\n    setIsLoading(true);\r\n    setError('');\r\n    try {\r\n      const res = await axios.get(`${API_BASE}/chats`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n      setChats(res.data);\r\n    } catch (err) {\r\n      console.error(\"Failed to fetch chats:\", err);\r\n      setError('Could not load chats.');\r\n      setChats([]); // Clear chats on error\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Fetch chats when the component mounts or token changes\r\n  useEffect(() => {\r\n    fetchChats();\r\n  }, [token]);\r\n\r\n  return (\r\n    <div className=\"w-[20%] h-full bg-gray-800 border-r border-gray-700 p-4 flex flex-col hidden md:flex\">\r\n      <button\r\n        onClick={onNewChat} // Call parent function\r\n        className=\"mb-4 w-full bg-green-600 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-green-700 transition-colors\"\r\n      >\r\n        + New Chat\r\n      </button>\r\n\r\n      <h2 className=\"text-lg font-semibold text-white mb-2\">Chat History</h2>\r\n      {isLoading && <p className=\"text-gray-400 text-sm\">Loading chats...</p>}\r\n      {error && <p className=\"text-red-500 text-sm\">{error}</p>}\r\n\r\n      <div className=\"flex-1 overflow-y-auto space-y-2 pr-1\"> {/* Added pr-1 for scrollbar */}\r\n        {chats && chats.length > 0 ? (\r\n          chats.map((chat) => (\r\n            <div\r\n              key={chat._id}\r\n              onClick={() => onSelectChat(chat._id)} // Call parent function with chat ID\r\n              className={`p-2 rounded-md cursor-pointer truncate text-sm transition-colors ${\r\n                selectedChatId === chat._id\r\n                  ? 'bg-green-700 text-white'\r\n                  : 'text-gray-300 hover:bg-gray-700'\r\n              }`}\r\n            >\r\n              {chat.title || `Chat ${chat._id.slice(-6)}`} {/* Fallback title */}\r\n              {/* Optional: Show last message preview */}\r\n              {/* <p className=\"text-xs text-gray-400 truncate mt-1\">{chat.lastMessage || '...'}</p> */}\r\n            </div>\r\n          ))\r\n        ) : (\r\n          !isLoading && !error && <p className=\"text-gray-400 text-sm\">No chats yet.</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":"AAAA,4BAA4B;;;;;;AAC5B;AACA;AACA,8LAA2B,mDAAmD;;;;;;;;;AAE9E,6DAA6D;AAC7D,MAAM,WAAW,QAAQ,GAAG,CAAC,mBAAmB,IAAI;AAErC,SAAS,YAAY,EAAE,YAAY,EAAE,SAAS,EAAE,cAAc,EAAE;IAC7E,MAAM,CAAC,OAAO,SAAS,GAAG,IAAA,+GAAQ,EAAC,EAAE;IACrC,MAAM,CAAC,WAAW,aAAa,GAAG,IAAA,+GAAQ,EAAC;IAC3C,MAAM,CAAC,OAAO,SAAS,GAAG,IAAA,+GAAQ,EAAC;IACnC,MAAM,EAAE,KAAK,EAAE,GAAG,IAAA,sIAAO,KAAI,yBAAyB;IAEtD,MAAM,aAAa;QACjB,IAAI,CAAC,OAAO,QAAQ,+BAA+B;QACnD,aAAa;QACb,SAAS;QACT,IAAI;YACF,MAAM,MAAM,MAAM,qHAAK,CAAC,GAAG,CAAC,GAAG,SAAS,MAAM,CAAC,EAAE;gBAC/C,SAAS;oBAAE,eAAe,CAAC,OAAO,EAAE,OAAO;gBAAC;YAC9C;YACA,SAAS,IAAI,IAAI;QACnB,EAAE,OAAO,KAAK;YACZ,QAAQ,KAAK,CAAC,0BAA0B;YACxC,SAAS;YACT,SAAS,EAAE,GAAG,uBAAuB;QACvC,SAAU;YACR,aAAa;QACf;IACF;IAEA,yDAAyD;IACzD,IAAA,gHAAS,EAAC;QACR;IACF,GAAG;QAAC;KAAM;IAEV,qBACE,qKAAC;QAAI,WAAU;;0BACb,qKAAC;gBACC,SAAS;gBACT,WAAU;0BACX;;;;;;0BAID,qKAAC;gBAAG,WAAU;0BAAwC;;;;;;YACrD,2BAAa,qKAAC;gBAAE,WAAU;0BAAwB;;;;;;YAClD,uBAAS,qKAAC;gBAAE,WAAU;0BAAwB;;;;;;0BAE/C,qKAAC;gBAAI,WAAU;;oBAAwC;oBACpD,SAAS,MAAM,MAAM,GAAG,IACvB,MAAM,GAAG,CAAC,CAAC,qBACT,qKAAC;4BAEC,SAAS,IAAM,aAAa,KAAK,GAAG;4BACpC,WAAW,CAAC,iEAAiE,EAC3E,mBAAmB,KAAK,GAAG,GACvB,4BACA,mCACJ;;gCAED,KAAK,KAAK,IAAI,CAAC,KAAK,EAAE,KAAK,GAAG,CAAC,KAAK,CAAC,CAAC,IAAI;gCAAC;;2BARvC,KAAK,GAAG;;;;oCAcjB,CAAC,aAAa,CAAC,uBAAS,qKAAC;wBAAE,WAAU;kCAAwB;;;;;;;;;;;;;;;;;;AAKvE","debugId":null}},
    {"offset": {"line": 317, "column": 0}, "map": {"version":3,"sources":["file:///D:/FYP/Fyp/frontend/components/Message.js"],"sourcesContent":["export default function Message({ sender, text }) {\r\n  const isAI = sender === 'ai';\r\n\r\n  return (\r\n    <div className={`flex ${isAI ? 'justify-start' : 'justify-end'} mb-4`}>\r\n      <div\r\n        className={`max-w-xl px-4 py-3 rounded-lg shadow-md ${\r\n          isAI\r\n            ? 'bg-gray-700 text-white'\r\n            : 'bg-green-600 text-white'\r\n        }`}\r\n      >\r\n        {/* We use whitespace-pre-wrap to respect newlines from the AI's response */}\r\n        <p className=\"whitespace-pre-wrap\">{text}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":";;;;;;AAAe,SAAS,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAE;IAC9C,MAAM,OAAO,WAAW;IAExB,qBACE,qKAAC;QAAI,WAAW,CAAC,KAAK,EAAE,OAAO,kBAAkB,cAAc,KAAK,CAAC;kBACnE,cAAA,qKAAC;YACC,WAAW,CAAC,wCAAwC,EAClD,OACI,2BACA,2BACJ;sBAGF,cAAA,qKAAC;gBAAE,WAAU;0BAAuB;;;;;;;;;;;;;;;;AAI5C","debugId":null}},
    {"offset": {"line": 352, "column": 0}, "map": {"version":3,"sources":["file:///D:/FYP/Fyp/frontend/components/ChatInput.js"],"sourcesContent":["import { useRef, useEffect } from 'react';\r\n\r\nexport default function ChatInput({ input, setInput, onSubmit, isLoading }) {\r\n  const textareaRef = useRef(null);\r\n\r\n  // Auto-resize the textarea\r\n  useEffect(() => {\r\n    if (textareaRef.current) {\r\n      textareaRef.current.style.height = 'auto';\r\n      const scrollHeight = textareaRef.current.scrollHeight;\r\n      textareaRef.current.style.height = `${scrollHeight}px`;\r\n    }\r\n  }, [input]);\r\n\r\n  return (\r\n    <form\r\n      onSubmit={onSubmit}\r\n      className=\"sticky bottom-0 left-0 right-0 p-4 bg-gray-900/80 backdrop-blur-md\"\r\n    >\r\n      <div className=\"container mx-auto max-w-3xl flex items-center bg-gray-800 rounded-xl border border-gray-700 p-2 shadow-lg\">\r\n        <textarea\r\n          ref={textareaRef}\r\n          rows=\"1\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          placeholder=\"Ask about any Pakistani document...\"\r\n          disabled={isLoading}\r\n          onKeyDown={(e) => {\r\n            if (e.key === 'Enter' && !e.shiftKey) {\r\n              e.preventDefault();\r\n              onSubmit(e);\r\n            }\r\n          }}\r\n          className=\"flex-1 bg-transparent text-white placeholder-gray-400 focus:outline-none resize-none p-2 max-h-40 overflow-y-auto\"\r\n        />\r\n        <button\r\n          type=\"submit\"\r\n          disabled={isLoading || !input.trim()}\r\n          className=\"bg-green-600 text-white rounded-lg px-4 py-2 font-semibold disabled:opacity-50 hover:bg-green-700 focus:outline-none transition-colors\"\r\n        >\r\n          {isLoading ? '...' : 'Send'}\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n}"],"names":[],"mappings":";;;;;AAAA;;;AAEe,SAAS,UAAU,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE;IACxE,MAAM,cAAc,IAAA,6GAAM,EAAC;IAE3B,2BAA2B;IAC3B,IAAA,gHAAS,EAAC;QACR,IAAI,YAAY,OAAO,EAAE;YACvB,YAAY,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG;YACnC,MAAM,eAAe,YAAY,OAAO,CAAC,YAAY;YACrD,YAAY,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG,GAAG,aAAa,EAAE,CAAC;QACxD;IACF,GAAG;QAAC;KAAM;IAEV,qBACE,qKAAC;QACC,UAAU;QACV,WAAU;kBAEV,cAAA,qKAAC;YAAI,WAAU;;8BACb,qKAAC;oBACC,KAAK;oBACL,MAAK;oBACL,OAAO;oBACP,UAAU,CAAC,IAAM,SAAS,EAAE,MAAM,CAAC,KAAK;oBACxC,aAAY;oBACZ,UAAU;oBACV,WAAW,CAAC;wBACV,IAAI,EAAE,GAAG,KAAK,WAAW,CAAC,EAAE,QAAQ,EAAE;4BACpC,EAAE,cAAc;4BAChB,SAAS;wBACX;oBACF;oBACA,WAAU;;;;;;8BAEZ,qKAAC;oBACC,MAAK;oBACL,UAAU,aAAa,CAAC,MAAM,IAAI;oBAClC,WAAU;8BAET,YAAY,QAAQ;;;;;;;;;;;;;;;;;AAK/B","debugId":null}},
    {"offset": {"line": 425, "column": 0}, "map": {"version":3,"sources":["file:///D:/FYP/Fyp/frontend/components/ChatWindow.js"],"sourcesContent":["// components/ChatWindow.js\r\nimport { useState, useRef, useEffect } from 'react';\r\nimport { useAuth } from '../context/AuthContext';\r\nimport Message from './Message';\r\nimport ChatInput from './ChatInput';\r\nimport axios from 'axios'; // Using axios\r\n\r\nconst API_BASE = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000/api';\r\n\r\nconst examplePrompts = [\r\n  'How to make a new Passport?',\r\n  'What documents do I need for a CNIC?',\r\n  'Summarize the new property tax law.',\r\n];\r\n\r\n// Accept chatId and onChatCreated as props\r\nexport default function ChatWindow({ chatId, onChatCreated }) {\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isFetchingMessages, setIsFetchingMessages] = useState(false);\r\n  const { token } = useAuth();\r\n  const messagesEndRef = useRef(null);\r\n\r\n  // Scroll to bottom effect\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [messages]);\r\n\r\n  // Effect to fetch messages when chatId changes\r\n  useEffect(() => {\r\n    const fetchMessages = async () => {\r\n      if (!chatId || !token) {\r\n        setMessages([]); // Clear messages if no chat selected or not logged in\r\n        return;\r\n      }\r\n      setIsFetchingMessages(true);\r\n      setMessages([]); // Clear previous messages immediately\r\n      try {\r\n        const res = await axios.get(`${API_BASE}/chats/${chatId}`, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        });\r\n        // Adapt based on your backend response structure\r\n        // Assuming res.data.messages is the array\r\n        const fetchedMessages = res.data.messages.map(msg => ({\r\n          sender: msg.role === 'user' ? 'user' : 'ai',\r\n          text: msg.content\r\n        }));\r\n        setMessages(fetchedMessages);\r\n      } catch (error) {\r\n        console.error(\"Failed to fetch messages:\", error);\r\n        setMessages([{ sender: 'ai', text: 'Could not load messages for this chat.' }]);\r\n      } finally {\r\n        setIsFetchingMessages(false);\r\n      }\r\n    };\r\n\r\n    fetchMessages();\r\n  }, [chatId, token]); // Re-run when chatId or token changes\r\n\r\nconst handleSubmit = async (e) => {\r\n    e.preventDefault(); // Prevent default form submission\r\n    // Ensure input has text, not loading, and user is logged in\r\n    if (!input.trim() || isLoading || !token) return;\r\n\r\n    const userMessage = { sender: 'user', text: input };\r\n    setMessages((prev) => [...prev, userMessage]);\r\n    setInput('');\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      let replyText;\r\n      let newChatId = chatId;\r\n\r\n      // This block ONLY runs if no chat is currently selected (chatId is null/undefined)\r\n      if (!chatId) {\r\n        // --- Create NEW chat ---\r\n        console.log(\"Attempting to create NEW chat...\"); // Add log\r\n        const res = await axios.post(\r\n          `${API_BASE}/chats/new`,\r\n          { message: input }, // Send the first message\r\n          { headers: { Authorization: `Bearer ${token}` } }\r\n        );\r\n\r\n        console.log(\"Response from /chats/new:\", res.data); // Log response\r\n\r\n        // --- Safely access response data ---\r\n        replyText = res.data?.reply;\r\n        newChatId = res.data?.chat?._id; // Use optional chaining\r\n\r\n        if (newChatId && onChatCreated) {\r\n          onChatCreated(newChatId); // Notify parent (dashboard)\r\n        } else if (!newChatId) {\r\n          console.error(\"New chat created, but ID was not returned:\", res.data);\r\n          // Optionally, inform parent to just refresh sidebar without selecting\r\n          if (onChatCreated) onChatCreated(null);\r\n        }\r\n      } else {\r\n        // --- Add message to EXISTING chat ---\r\n        console.log(`Adding message to EXISTING chat: ${chatId}`); // Add log\r\n        const res = await axios.post(\r\n          `${API_BASE}/chats/${chatId}/message`,\r\n          { message: input, sessionId: chatId },\r\n          { headers: { Authorization: `Bearer ${token}` } }\r\n        );\r\n        replyText = res.data?.reply; // Optional chaining\r\n      }\r\n\r\n    if (replyText) {\r\n          setMessages((prev) => [\r\n            ...prev,\r\n            { sender: 'ai', text: replyText },\r\n          ]);\r\n      } else {\r\n          // This part runs when replyText is missing for new chats\r\n          console.error(\"No reply text received from backend.\");\r\n          setMessages((prev) => [\r\n            ...prev,\r\n            { sender: 'ai', text: \"Sorry, I couldn't get a response.\" }, // Your error message\r\n          ]);\r\n      }\r\n\r\n\r\n    } catch (error) {\r\n      console.error(\"Send message failed:\", error);\r\n      const errorMsg = error.response?.data?.message || 'Sorry, could not send message.';\r\n      setMessages((prev) => [\r\n        ...prev,\r\n        { sender: 'ai', text: errorMsg },\r\n      ]);\r\n      // If creating a new chat failed, remove the user's optimistic message\r\n      if (!chatId) {\r\n         setMessages((prev) => prev.slice(0, -1));\r\n      }\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     if (!input.trim() || isLoading || !token) return;\r\n\r\n//     const userMessage = { sender: 'user', text: input };\r\n//     setMessages((prev) => [...prev, userMessage]);\r\n//     setInput('');\r\n//     setIsLoading(true);\r\n\r\n//     try {\r\n//       let replyText;\r\n//       let newChatId = chatId; // Assume existing chat unless created\r\n\r\n//       if (!chatId) {\r\n//         // --- Create NEW chat ---\r\n//         const res = await axios.post(\r\n//           `${API_BASE}/chats/new`,\r\n//           { message: input },\r\n//           { headers: { Authorization: `Bearer ${token}` } }\r\n//         );\r\n//         // Assuming backend returns { chat: { _id: '...' }, reply: '...' }\r\n//         replyText = res.data.reply;\r\n//         newChatId = res.data.chat._id; // Get the ID of the newly created chat\r\n//         // Call the callback to update the parent's state\r\n//         if (onChatCreated) {\r\n//           onChatCreated(newChatId);\r\n//         }\r\n\r\n//       } else {\r\n//         // --- Add message to EXISTING chat ---\r\n//         const res = await axios.post(\r\n//           `${API_BASE}/chats/${chatId}/message`,\r\n//           { message: input, sessionId: chatId }, // Send sessionId if needed by backend\r\n//           { headers: { Authorization: `Bearer ${token}` } }\r\n//         );\r\n//         // Assuming backend returns { reply: '...' }\r\n//         replyText = res.data.reply;\r\n//       }\r\n\r\n//       setMessages((prev) => [\r\n//         ...prev,\r\n//         { sender: 'ai', text: replyText },\r\n//       ]);\r\n\r\n//     } catch (error) {\r\n//       console.error(\"Send message failed:\", error);\r\n//       const errorMsg = error.response?.data?.message || 'Sorry, could not send message.';\r\n//       setMessages((prev) => [\r\n//         ...prev,\r\n//         { sender: 'ai', text: errorMsg },\r\n//       ]);\r\n//       // Optional: If creating a new chat failed, remove the user's message\r\n//       if (!chatId) {\r\n//          setMessages((prev) => prev.slice(0, -1)); // Remove the optimistic user message\r\n//       }\r\n//     } finally {\r\n//       setIsLoading(false);\r\n//     }\r\n//   };\r\n\r\n\r\n  const handleExampleClick = (prompt) => {\r\n    setInput(prompt);\r\n  };\r\n\r\n  // Decide whether to show welcome screen or chat messages\r\n  const showWelcome = !chatId && messages.length === 0 && !isFetchingMessages;\r\n\r\n  return (\r\n    <div className=\"flex-1 flex flex-col h-full overflow-hidden\">\r\n      <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\r\n        <div className=\"container mx-auto max-w-3xl\">\r\n          {isFetchingMessages ? (\r\n             <div className=\"text-center text-gray-400 mt-20\">Loading messages...</div>\r\n          ) : showWelcome ? (\r\n            <div className=\"text-center mt-20\">\r\n              <h1 className=\"text-4xl font-bold text-white mb-4\">Awaam AI</h1>\r\n              <p className=\"text-lg text-gray-400 mb-12\">\r\n                Your AI assistant for Pakistani public documents.\r\n              </p>\r\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n                {examplePrompts.map((prompt) => (\r\n                  <button\r\n                    key={prompt}\r\n                    onClick={() => handleExampleClick(prompt)}\r\n                    className=\"bg-gray-800 border border-gray-700 p-4 rounded-lg text-left hover:bg-gray-700 transition-colors\"\r\n                  >\r\n                    <p className=\"font-semibold text-white\">{prompt}</p>\r\n                  </button>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          ) : messages.length === 0 && !isLoading ? (\r\n             <div className=\"text-center text-gray-400 mt-20\">Send a message to start the chat.</div>\r\n          ) : (\r\n            messages.map((msg, index) => (\r\n              <Message key={index} sender={msg.sender} text={msg.text} />\r\n            ))\r\n          )}\r\n\r\n          {isLoading && <Message sender=\"ai\" text=\"â€¦\" />}\r\n          <div ref={messagesEndRef} />\r\n        </div>\r\n      </div>\r\n\r\n      <ChatInput\r\n        input={input}\r\n        setInput={setInput}\r\n        onSubmit={handleSubmit}\r\n        isLoading={isLoading}\r\n      />\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 780, "column": 0}, "map": {"version":3,"sources":["file:///D:/FYP/Fyp/frontend/pages/dashboard.js"],"sourcesContent":["// pages/dashboard.js\r\n// import Layout from '../components/Layout';\r\n// import ChatSidebar from '../components/ChatSidebar';\r\n// import ChatWindow from '../components/ChatWindow';\r\n// import { useAuth } from '../context/AuthContext';\r\n// import { useRouter } from 'next/router';\r\n// import { useEffect, useState } from 'react';\r\n\r\n// export default function Dashboard() {\r\n//   const { isLoggedIn, token } = useAuth(); // Need token to pass to ChatWindow maybe\r\n//   const router = useRouter();\r\n//   const [isCheckingAuth, setIsCheckingAuth] = useState(true);\r\n//   const [selectedChatId, setSelectedChatId] = useState(null); // State for selected chat\r\n//   const [refreshSidebarKey, setRefreshSidebarKey] = useState(0); // State to trigger sidebar refresh\r\n\r\n//   useEffect(() => {\r\n//     if (isLoggedIn === null) return;\r\n//     if (!isLoggedIn) {\r\n//       router.push('/login');\r\n//     } else {\r\n//       setIsCheckingAuth(false);\r\n//     }\r\n//   }, [isLoggedIn, router]);\r\n\r\n//   const handleSelectChat = (chatId) => {\r\n//     setSelectedChatId(chatId);\r\n//   };\r\n\r\n//   const handleNewChat = () => {\r\n//     setSelectedChatId(null); // Set to null for a new chat\r\n//   };\r\n\r\n//   // Callback function for ChatWindow to update chat ID after a new chat is created\r\n//   const handleChatCreated = (newChatId) => {\r\n//     setSelectedChatId(newChatId);\r\n//     // Force sidebar refresh by changing its key\r\n//     setRefreshSidebarKey(prevKey => prevKey + 1);\r\n//   };\r\n\r\n//   if (isCheckingAuth) {\r\n//     return (\r\n//       <Layout>\r\n//         <div className=\"flex-1 flex items-center justify-center\">\r\n//           <p>Loading...</p>\r\n//         </div>\r\n//       </Layout>\r\n//     );\r\n//   }\r\n\r\n//   return (\r\n//     <Layout>\r\n//       <div className=\"flex-1 flex h-full overflow-hidden\">\r\n//         {/* Pass functions and selected ID to Sidebar */}\r\n//         {/* Use key prop to force re-fetch when a new chat is created */}\r\n//         <ChatSidebar\r\n//           key={refreshSidebarKey}\r\n//           onSelectChat={handleSelectChat}\r\n//           onNewChat={handleNewChat}\r\n//           selectedChatId={selectedChatId}\r\n//         />\r\n\r\n//         {/* Pass selected ID and creation handler to ChatWindow */}\r\n//         <div className=\"flex-1 h-full\">\r\n//           <ChatWindow\r\n//             chatId={selectedChatId}\r\n//             onChatCreated={handleChatCreated} // Pass the handler\r\n//           />\r\n//         </div>\r\n//       </div>\r\n//     </Layout>\r\n//   );\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n// pages/dashboard.js\r\nimport Layout from '../components/Layout';\r\nimport ChatSidebar from '../components/ChatSidebar';\r\nimport ChatWindow from '../components/ChatWindow';\r\nimport { useAuth } from '../context/AuthContext';\r\nimport { useRouter } from 'next/router';\r\nimport { useEffect, useState } from 'react';\r\n\r\nexport default function Dashboard() {\r\n  // Destructure loading state from useAuth\r\n  const { isLoggedIn, token, loading: authLoading } = useAuth();\r\n  const router = useRouter();\r\n  const [selectedChatId, setSelectedChatId] = useState(null);\r\n  const [refreshSidebarKey, setRefreshSidebarKey] = useState(0);\r\n\r\n  useEffect(() => {\r\n    // Wait until the auth status is determined\r\n    if (authLoading) {\r\n      return; // Do nothing while loading\r\n    }\r\n\r\n    // If not loading and not logged in, redirect\r\n    if (!isLoggedIn) {\r\n      router.push('/login');\r\n    }\r\n  }, [isLoggedIn, authLoading, router]); // Add authLoading to dependencies\r\n\r\n  const handleSelectChat = (chatId) => {\r\n    setSelectedChatId(chatId);\r\n  };\r\n\r\n  const handleNewChat = () => {\r\n    setSelectedChatId(null);\r\n  };\r\n\r\n  const handleChatCreated = (newChatId) => {\r\n    if (newChatId) { // Only select if ID is valid\r\n        setSelectedChatId(newChatId);\r\n    }\r\n    setRefreshSidebarKey(prevKey => prevKey + 1);\r\n  };\r\n\r\n  // Show a loading state while checking auth OR if not logged in yet (before redirect happens)\r\n  if (authLoading || !isLoggedIn) {\r\n    return (\r\n      <Layout>\r\n        <div className=\"flex-1 flex items-center justify-center\">\r\n          <p>Loading...</p> {/* Or a spinner component */}\r\n        </div>\r\n      </Layout>\r\n    );\r\n  }\r\n\r\n  // Render the dashboard only if loading is complete and user is logged in\r\n  return (\r\n    <Layout>\r\n      <div className=\"flex-1 flex h-full overflow-hidden\">\r\n        <ChatSidebar\r\n          key={refreshSidebarKey}\r\n          onSelectChat={handleSelectChat}\r\n          onNewChat={handleNewChat}\r\n          selectedChatId={selectedChatId}\r\n        />\r\n        <div className=\"flex-1 h-full\">\r\n          <ChatWindow\r\n            chatId={selectedChatId}\r\n            onChatCreated={handleChatCreated}\r\n          />\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  );\r\n}"],"names":[],"mappings":"AAAA,qBAAqB;AACrB,6CAA6C;AAC7C,uDAAuD;AACvD,qDAAqD;AACrD,oDAAoD;AACpD,2CAA2C;AAC3C,+CAA+C;AAE/C,wCAAwC;AACxC,uFAAuF;AACvF,gCAAgC;AAChC,gEAAgE;AAChE,2FAA2F;AAC3F,uGAAuG;AAEvG,sBAAsB;AACtB,uCAAuC;AACvC,yBAAyB;AACzB,+BAA+B;AAC/B,eAAe;AACf,kCAAkC;AAClC,QAAQ;AACR,8BAA8B;AAE9B,2CAA2C;AAC3C,iCAAiC;AACjC,OAAO;AAEP,kCAAkC;AAClC,6DAA6D;AAC7D,OAAO;AAEP,sFAAsF;AACtF,+CAA+C;AAC/C,oCAAoC;AACpC,mDAAmD;AACnD,oDAAoD;AACpD,OAAO;AAEP,0BAA0B;AAC1B,eAAe;AACf,iBAAiB;AACjB,oEAAoE;AACpE,8BAA8B;AAC9B,iBAAiB;AACjB,kBAAkB;AAClB,SAAS;AACT,MAAM;AAEN,aAAa;AACb,eAAe;AACf,6DAA6D;AAC7D,4DAA4D;AAC5D,4EAA4E;AAC5E,uBAAuB;AACvB,oCAAoC;AACpC,4CAA4C;AAC5C,sCAAsC;AACtC,4CAA4C;AAC5C,aAAa;AAEb,sEAAsE;AACtE,0CAA0C;AAC1C,wBAAwB;AACxB,sCAAsC;AACtC,oEAAoE;AACpE,eAAe;AACf,iBAAiB;AACjB,eAAe;AACf,gBAAgB;AAChB,OAAO;AACP,IAAI;AAMJ,qBAAqB;;;;;;AACrB;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AAEe,SAAS;IACtB,yCAAyC;IACzC,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,SAAS,WAAW,EAAE,GAAG,IAAA,sIAAO;IAC3D,MAAM,SAAS,IAAA,gJAAS;IACxB,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,IAAA,+GAAQ,EAAC;IACrD,MAAM,CAAC,mBAAmB,qBAAqB,GAAG,IAAA,+GAAQ,EAAC;IAE3D,IAAA,gHAAS,EAAC;QACR,2CAA2C;QAC3C,IAAI,aAAa;YACf,QAAQ,2BAA2B;QACrC;QAEA,6CAA6C;QAC7C,IAAI,CAAC,YAAY;YACf,OAAO,IAAI,CAAC;QACd;IACF,GAAG;QAAC;QAAY;QAAa;KAAO,GAAG,kCAAkC;IAEzE,MAAM,mBAAmB,CAAC;QACxB,kBAAkB;IACpB;IAEA,MAAM,gBAAgB;QACpB,kBAAkB;IACpB;IAEA,MAAM,oBAAoB,CAAC;QACzB,IAAI,WAAW;YACX,kBAAkB;QACtB;QACA,qBAAqB,CAAA,UAAW,UAAU;IAC5C;IAEA,6FAA6F;IAC7F,IAAI,eAAe,CAAC,YAAY;QAC9B,qBACE,qKAAC,oIAAM;sBACL,cAAA,qKAAC;gBAAI,WAAU;;kCACb,qKAAC;kCAAE;;;;;;oBAAc;;;;;;;;;;;;IAIzB;IAEA,yEAAyE;IACzE,qBACE,qKAAC,oIAAM;kBACL,cAAA,qKAAC;YAAI,WAAU;;8BACb,qKAAC,yIAAW;oBAEV,cAAc;oBACd,WAAW;oBACX,gBAAgB;mBAHX;;;;;8BAKP,qKAAC;oBAAI,WAAU;8BACb,cAAA,qKAAC,wIAAU;wBACT,QAAQ;wBACR,eAAe;;;;;;;;;;;;;;;;;;;;;;AAM3B","debugId":null}}]
}